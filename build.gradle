import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.apache.tools.ant.filters.EscapeUnicode
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "5.1.0"
    id "org.sonarqube" version "2.8"
    id "org.owasp.dependencycheck" version "6.0.1"
}

apply plugin: 'maven-publish'
apply plugin: 'java-library'
apply plugin: 'jacoco'


description = 'payment-method-samsung-pay'
group 'com.payline.payment.samsung-pay'
version '1.4.0'

compileJava.options.encoding = 'UTF-8'

configurations {
    fatJarTest
}

ext {
    paymentMethodApiVersion = '1.14'
    paymentMethodIntegrationVersion = '1.4'
    releaseDirectoryPath = 'D:/build'
}

dependencies {
    compileOnly("com.payline:payment-method-api:$paymentMethodApiVersion")
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.16.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.16.0'

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    implementation group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.14'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'

    testImplementation group: "junit", name: "junit", version: "4.13.2"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.12.4'
    testImplementation "com.payline:payment-method-api:${paymentMethodApiVersion}"
    testImplementation "com.payline:payment-method-integration:${paymentMethodIntegrationVersion}"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.7.2'


    fatJarTest group: "junit", name: "junit", version: "4.13.2"
    fatJarTest group: 'org.mockito', name: 'mockito-core', version: '3.12.4'
    fatJarTest group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.7.2'
    fatJarTest group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.2'
}

assemble.dependsOn shadowJar

dependencyCheck {
    format 'ALL'
    skipConfigurations = ['jacocoAgent', 'jacocoAnt', 'annotationProcessor', 'axisGenAntTask', 'jaxws', 'execJar', 'jaxb', 'generateSources']
    cve {
        urlBase = 'https://jindus.intra.monext.fr/nist-data-mirror/nvdcve-1.0-%d.json.gz'
        urlModified = 'https://jindus.intra.monext.fr/nist-data-mirror/nvdcve-1.0-modified.json.gz'
    }
}

shadowJar {
    classifier = ''
    dependencies {
        exclude(dependency('com.payline:payment-method-api'))
        exclude(dependency('org.apache.logging.log4j:log4j-api:2.16.0'))
        exclude(dependency('org.apache.logging.log4j:log4j-core:2.16.0'))
        exclude(dependency('org.junit.jupiter:junit-jupiter-params:5.7.2'))
        exclude(dependency('org.junit.jupiter:junit-jupiter-api:5.7.2'))
    }
}

task buildToLocal(type: Copy) {
    dependsOn shadowJar
    from shadowJar
    into "${releaseDirectoryPath}"
}

task printVersion {
    doLast {
        println version
    }
}

/* Replace tokens in resources files after compilation */
processResources {
    filesMatching('messages_fr.properties') {
        filter(EscapeUnicode)
    }
    filesMatching('release.properties') {
        filter(ReplaceTokens, tokens: [
                'version': project.version.replaceFirst("-.*", ""),
                'date'   : new Date().format("dd/MM/yyyy")
        ])
    }
}

// To create a JAR including test classes and dependencies
task testJar(type: ShadowJar) {
    dependsOn 'shadowJar', 'testClasses'
    classifier = 'tests'
    from sourceSets.test.output.classesDirs + shadowJar
    configurations = [project.configurations.fatJarTest]
}


repositories {
    mavenLocal()
    maven {
        url nexusGroupsUrl
        credentials {
            username mavenUser
            password mavenPassword
        }
    }
    maven {
        url nexusSnapshotUrl
        credentials {
            username mavenUser
            password mavenPassword
        }
    }
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)

            // For release only
            if (!project.version.contains('-')) {
                artifact testJar
            }
        }
    }
    repositories {
        maven {
            if (project.version.endsWith('-SNAPSHOT')) {
                url nexusSnapshotUrl
            } else {
                url nexusPublicUrl
            }
            credentials {
                username mavenUser
                password mavenPassword
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}
plugins.withType(JacocoPlugin) {
    tasks["test"].finalizedBy 'jacocoTestReport'
}
sonarqube {
    properties {
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
        property 'sonar.dependencyCheck.htmlReportPath', "${project.buildDir}/reports/dependency-check-report.html"
    }
}


test.exclude '**/*IT.class'
