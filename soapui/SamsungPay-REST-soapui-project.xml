<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="2b77b07c-b850-4191-b873-eeb4b2547ebc" activeEnvironment="Default" name="SamsungPay_REST" resourceRoot="" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="5c08fe24-dc26-4c5e-b522-468366cc4052" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://api-ops.stg.mpay.samsung.com" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>URL dev API Samsung Pay</con:description><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://api-ops.stg.mpay.samsung.com</con:endpoint></con:endpoints><con:resource name="" path="" id="18a6e81c-cfc1-419e-a8c0-7388a0179c29"><con:settings/><con:parameters/><con:resource name="transactions" path="/ops/v1/transactions" id="2c0a2c8c-cdb6-4b25-9d8a-bbb63996c290"><con:settings/><con:parameters><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>X-Request-Id</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="createTransaction" id="55b7d677-bd75-438f-bf36-6f474d2a187b" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>callback</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>paymentDetails_service_id</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>paymentDetails_orderNumber</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>paymentDetails_recurring</con:name><con:value/><con:style>PLAIN</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>paymentDetails_protocol_type</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>paymentDetails_protocol_version</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>paymentDetails_amount_option</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>paymentDetails_amount_currency</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>paymentDetails_amount_total</con:name><con:value/><con:style>PLAIN</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>paymentDetails_merchant_name</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>paymentDetails_merchant_url</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>paymentDetails_merchant_reference</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>paymentDetails_allowedBrands_1</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>paymentDetails_allowedBrands_2</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:tran="https://api-ops.stg.mpay.samsung.com/ops/v1/transactions">tran:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=utf-8</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:tran="https://api-ops.stg.mpay.samsung.com/ops/v1/transactions">tran:Response</con:element></con:representation><con:request name="createTransactionReq" id="4796f10b-587c-4cd2-8dab-c14480c8906a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api-ops.stg.mpay.samsung.com</con:endpoint><con:request>{
	"callback": "${callback}",
	"paymentDetails": {
		"service": {
			"id": "${paymentDetails_service_id}"
		},
		"orderNumber": "${paymentDetails_orderNumber}",
		"recurring": "${paymentDetails_recurring}",
		"protocol": {
			"type": "${paymentDetails_protocol_type}",
			"version": "${paymentDetails_protocol_version}"
		},
		"amount": {
			"option": "${paymentDetails_amount_option}",
			"currency": "${paymentDetails_amount_currency}",
			"total": ${paymentDetails_amount_total}
		},
		"merchant": {
			"name": "${paymentDetails_merchant_name}",
			"url": "${paymentDetails_merchant_url}",
			"reference": "${paymentDetails_merchant_reference}"
		},
		"allowedBrands": [
			"${paymentDetails_allowedBrands_1}",
			"${paymentDetails_allowedBrands_2}"
		]
	}
}</con:request><con:originalUri>https://api-ops.stg.mpay.samsung.com/ops/v1/transactions</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Request-Id" value="${#Project#xRequestId}"/>
  <con:entry key="Content-Type" value="${#Project#contentType}"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>X-Request-Id</con:entry><con:entry>callback</con:entry><con:entry>paymentDetails_service_id</con:entry><con:entry>paymentDetails_orderNumber</con:entry><con:entry>paymentDetails_recurring</con:entry><con:entry>paymentDetails_protocol_type</con:entry><con:entry>paymentDetails_protocol_version</con:entry><con:entry>paymentDetails_amount_option</con:entry><con:entry>paymentDetails_amount_currency</con:entry><con:entry>paymentDetails_amount_total</con:entry><con:entry>paymentDetails_merchant_name</con:entry><con:entry>paymentDetails_merchant_url</con:entry><con:entry>paymentDetails_merchant_reference</con:entry><con:entry>paymentDetails_allowedBrands_1</con:entry><con:entry>paymentDetails_allowedBrands_2</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="paymentCredentials" path="/ops/v1/transactions/paymentCredentials/${#Project#sp_id}" id="3eedb569-534a-4a60-8b08-4a3a8c3d24e4"><con:settings/><con:parameters><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>X-Request-Id</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>serviceId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>id</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>#Project#sp_id</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:method name="retrievePaymentCredentials" id="20c44988-a33e-4b9c-bd7f-6e39ed2e5349" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:b6d="https://api-ops.stg.mpay.samsung.com/ops/v1/transactions/paymentCredentials/b6d58fe4b78344dda15daa">b6d:Fault</con:element></con:representation><con:request name="retrievePaymentCredentialsReq" id="f79a09c3-05f1-44d6-8e43-428395a3ac69" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api-ops.stg.mpay.samsung.com</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Request-Id" value="${#Project#xRequestId}"/>
  <con:entry key="#Project#sp_id" value="#Project#sp_id"/>
  <con:entry key="Content-Type" value="${#Project#contentType}"/>
</con:parameters><con:parameterOrder><con:entry>#Project#sp_id</con:entry><con:entry>Content-Type</con:entry><con:entry>X-Request-Id</con:entry><con:entry>serviceId</con:entry><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:resource><con:resource name="notifications" path="/ops/v1/notifications" id="cfd736ff-c94a-4ce9-b075-ed9f078cf9b8"><con:settings/><con:parameters><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>X-Request-Id</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="notifyTransactionResult" id="3b47c78a-8fdc-4af9-8444-26e9a6a362ef" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>payment_service_id</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>payment_reference</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>payment_status</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>payment_provider</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>payment_merchant_name</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>payment_merchant_reference</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>timestamp</con:name><con:value/><con:style>PLAIN</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:long</con:type><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:not="https://api-ops.stg.mpay.samsung.com/ops/v1/notifications">not:Fault</con:element></con:representation><con:request name="notifyTransactionResultReq" id="3a746e18-bb8f-4c61-b942-d9268a88ac99" mediaType="application/json" postQueryString="false" timeout=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api-ops.stg.mpay.samsung.com</con:endpoint><con:request>{
	"payment": {
		"service": {
			"id": "${payment_service_id}"
		}
		"reference": "${payment_reference}",
		"status": "${payment_status}",
		"provider": "${payment_provider}",
		"merchant": {
			"name": "${payment_merchant_name}",
			"reference": "${payment_merchant_reference}"
		}
	},
	"timestamp": ${timestamp}
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Request-Id" value="${#Project#xRequestId}"/>
  <con:entry key="Content-Type" value="${#Project#contentType}"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>X-Request-Id</con:entry><con:entry>payment_service_id</con:entry><con:entry>payment_reference</con:entry><con:entry>payment_status</con:entry><con:entry>payment_provider</con:entry><con:entry>payment_merchant_name</con:entry><con:entry>payment_merchant_reference</con:entry><con:entry>timestamp</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="0e5d4d6b-d714-4b1c-a7ca-a64c32a89980" name="Paiement SamsungPay"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="69fc6428-8eeb-47d1-9a6e-90c33178a791" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Test paiement SamsungPay - REST" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="CreateTransactionReq" id="4b76f562-4ec2-46a9-aab1-5aaca0dabaf1"><con:settings/><con:config service="https://api-ops.stg.mpay.samsung.com" resourcePath="/ops/v1/transactions" methodName="createTransaction" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTransactionReq" id="4796f10b-587c-4cd2-8dab-c14480c8906a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api-ops.stg.mpay.samsung.com</con:endpoint><con:request>{
	"callback": "${callback}",
	"paymentDetails": {
		"service": {
			"id": "${paymentDetails_service_id}"
		},
		"orderNumber": "${paymentDetails_orderNumber}",
		"recurring": "${paymentDetails_recurring}",
		"protocol": {
			"type": "${paymentDetails_protocol_type}",
			"version": "${paymentDetails_protocol_version}"
		},
		"amount": {
			"option": "${paymentDetails_amount_option}",
			"currency": "${paymentDetails_amount_currency}",
			"total": ${paymentDetails_amount_total}
		},
		"merchant": {
			"name": "${paymentDetails_merchant_name}",
			"url": "${paymentDetails_merchant_url}",
			"reference": "${paymentDetails_merchant_reference}"
		},
		"allowedBrands": [
			"${paymentDetails_allowedBrands_1}",
			"${paymentDetails_allowedBrands_2}"
		]
	}
}</con:request><con:originalUri>https://api-ops.stg.mpay.samsung.com/ops/v1/transactions</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="paymentDetails_allowedBrands_1" value="${#Project#sp_allowed_brand_1}"/>
  <con:entry key="paymentDetails_allowedBrands_2" value="${#Project#sp_allowed_brand_2}"/>
  <con:entry key="X-Request-Id" value="${#Project#xRequestId}"/>
  <con:entry key="paymentDetails_service_id" value="${#Project#serviceId}"/>
  <con:entry key="paymentDetails_amount_currency" value="${#Project#sp_amount_currency}"/>
  <con:entry key="paymentDetails_merchant_url" value="${#Project#sp_merchant_url}"/>
  <con:entry key="paymentDetails_amount_option" value="${#Project#sp_amount_option}"/>
  <con:entry key="paymentDetails_protocol_type" value="${#Project#sp_CONST_protocol_type}"/>
  <con:entry key="paymentDetails_amount_total" value="${#Project#sp_amount_total}"/>
  <con:entry key="paymentDetails_merchant_name" value="${#Project#sp_merchant_name}"/>
  <con:entry key="paymentDetails_orderNumber" value="${#Project#sp_order_number}"/>
  <con:entry key="paymentDetails_merchant_reference" value="${#Project#sp_merchant_reference}"/>
  <con:entry key="callback" value="${#Project#sp_callback}"/>
  <con:entry key="paymentDetails_recurring" value="${#Project#sp_recurring}"/>
  <con:entry key="paymentDetails_protocol_version" value="${#Project#sp_CONST_protocol_version}"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>X-Request-Id</con:entry><con:entry>callback</con:entry><con:entry>paymentDetails_service_id</con:entry><con:entry>paymentDetails_orderNumber</con:entry><con:entry>paymentDetails_recurring</con:entry><con:entry>paymentDetails_protocol_type</con:entry><con:entry>paymentDetails_protocol_version</con:entry><con:entry>paymentDetails_amount_option</con:entry><con:entry>paymentDetails_amount_currency</con:entry><con:entry>paymentDetails_amount_total</con:entry><con:entry>paymentDetails_merchant_name</con:entry><con:entry>paymentDetails_merchant_url</con:entry><con:entry>paymentDetails_merchant_reference</con:entry><con:entry>paymentDetails_allowedBrands_1</con:entry><con:entry>paymentDetails_allowedBrands_2</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransferTransactionId" id="2a44a334-1ffb-4079-b1e1-b6481bd7891f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>transactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTransactionReq</con:sourceStep><con:sourcePath>$.id</con:sourcePath><con:targetType>sp_id</con:targetType><con:targetStep>#Project#</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="RetrievePaymentCredentials" id="63400feb-1b5d-4d2a-a545-d209b0be1026"><con:settings/><con:config service="https://api-ops.stg.mpay.samsung.com" resourcePath="/ops/v1/transactions/paymentCredentials/${#Project#sp_id}" methodName="retrievePaymentCredentials" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RetrievePaymentCredentials" id="f79a09c3-05f1-44d6-8e43-428395a3ac69" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api-ops.stg.mpay.samsung.com</con:endpoint><con:request/><con:originalUri>https://api-ops.stg.mpay.samsung.com/ops/v1/transactions/paymentCredentials/b6d58fe4b78344dda15daa</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="X-Request-Id" value="${#Project#xRequestId}"/>
  <con:entry key="#Project#sp_id" value="#Project#sp_id"/>
  <con:entry key="serviceId" value="${#Project#serviceId}"/>
  <con:entry key="Content-Type" value="${#Project#contentType}"/>
</con:parameters><con:parameterOrder><con:entry>#Project#sp_id</con:entry><con:entry>Content-Type</con:entry><con:entry>X-Request-Id</con:entry><con:entry>serviceId</con:entry><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="CreateTimestamp" id="c6280f22-4233-4758-8e82-fb31fbd983d3"><con:settings/><con:config><script>def timestamp = new Date().format("YYMMddHHmm");
testRunner.testCase.testSuite.project.setPropertyValue( "sp_timestamp" , timestamp );</script></con:config></con:testStep><con:testStep type="restrequest" name="NotifyTransactionResult" id="783fe822-bf7e-48d6-b5a6-8537652d4b28"><con:settings/><con:config service="https://api-ops.stg.mpay.samsung.com" resourcePath="/ops/v1/notifications" methodName="notifyTransactionResult" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="NotifyTransactionResult" id="3a746e18-bb8f-4c61-b942-d9268a88ac99" mediaType="application/json" postQueryString="false" timeout=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api-ops.stg.mpay.samsung.com</con:endpoint><con:request>{
	"payment": {
		"service": {
			"id": "${payment_service_id}"
		},
		"reference": "${payment_reference}",
		"status": "${payment_status}",
		"provider": "${payment_provider}",
		"merchant": {
			"name": "${payment_merchant_name}",
			"reference": "${payment_merchant_reference}"
		}
	},
	"timestamp": ${timestamp}
}</con:request><con:originalUri>https://api-ops.stg.mpay.samsung.com/ops/v1/notifications</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="payment_merchant_name" value="${#Project#sp_merchant_name}"/>
  <con:entry key="payment_service_id" value="${#Project#serviceId}"/>
  <con:entry key="X-Request-Id" value="${#Project#xRequestId}"/>
  <con:entry key="payment_status" value="${#Project#sp_payment_status}"/>
  <con:entry key="payment_provider" value="${#Project#sp_CONST_payment_provider}"/>
  <con:entry key="payment_merchant_reference" value="${#Project#sp_merchant_reference}"/>
  <con:entry key="payment_reference" value="${#Project#sp_payment_reference}"/>
  <con:entry key="Content-Type" value="${#Project#contentType}"/>
  <con:entry key="timestamp" value="${#Project#sp_timestamp}"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>X-Request-Id</con:entry><con:entry>payment_service_id</con:entry><con:entry>payment_reference</con:entry><con:entry>payment_status</con:entry><con:entry>payment_provider</con:entry><con:entry>payment_merchant_name</con:entry><con:entry>payment_merchant_reference</con:entry><con:entry>timestamp</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="WebCheckoutUI" id="f8c88123-9f3d-4b70-a9e4-31e6fca0eaf7"><con:settings/><con:config><script><![CDATA[var frame;
var overlay;
var myOrigin;
var disposeWindow = false;
var inProgress = false;
var initStylesComplete = true;
var isMobile = false;
var initSettingOption = "connect";
var mobileMainPath = "m_gsmpi/encode.do";
var pcMainPath = "pc_gsmpi/index.do";
var SamsungPay = {
    connect: function(h, a, g, d, e, c, f, b, i) {
        var j = {};
        j.transactionId = h;
        j.href = a;
        j.serviceId = g;
        j.callbackUrl = d;
        j.cancelUrl = e;
        j.countryCode = c;
        j.isWindow = true;
        j.mod = f;
        j.exp = b;
        j.keyId = i;
        SamsungPay.executeFlow(SamsungPay.getInitSettings(initSettingOption, j))
    },
    getInitSettings: function(c, d) {
        var e = {};
        myOrigin = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ":" + window.location.port : "");
        var a = new Array();
        a.push(window.location.hostname);
        var b = document.referrer;
        if (b != null) {
            b = b.replace("http://", "");
            b = b.replace("https://", "");
            b = b.substring(0, b.indexOf("/"));
            b = b.substring(0, b.indexOf(":"));
            a.push(b)
        }
        e.domains = a;
        e.myOrigin = myOrigin;
        e.transactionId = d.transactionId;
        e.href = d.href;
        e.serviceId = d.serviceId;
        e.callbackUrl = d.callbackUrl;
        e.cancelUrl = d.cancelUrl;
        e.countryCode = d.countryCode;
        e.isWindow = d.isWindow;
        e.mod = d.mod;
        e.exp = d.exp;
        e.keyId = d.keyId;
        return e
    },
    executeFlow: function(a) {
        if (inProgress) {
            return
        }
        SamsungPay.initStyles();
        SamsungPay.initFrame(a);
        inProgress = true
    },
    initStyles: function() {
        if (!initStylesComplete) {
            document.getElementsByTagName("head")[0].appendChild(SamsungPay.buildStyle());
            initStylesComplete = true
        }
    },
    buildStyle: function() {
        var a = document.createElement("link");
        a.setAttribute("rel", "stylesheet");
        a.setAttribute("href", "/onlinepay/resources/css/SamsungPay_client.css");
        return a
    },
    buildOverlay: function() {
        var a = document.createElement("div");
        a.id = "SamsungPay_overlay";
        return a
    },
    initFrame: function(b) {
        var a = b.href.split("?");
        var c;
        isMobile = SamsungPay.checkMobileAndRunnable();
        if (!window.postMessage) {
            b.isWindow = true
        }
        if (a[0].lastIndexOf("/") != (a[0].length - "/".length)) {
            a[0] = a[0] + "/"
        }
        if (isMobile) {
            c = a[0] + mobileMainPath + SamsungPay.buildQueryString(b)
        } else {
            c = a[0] + pcMainPath + SamsungPay.buildQueryString(b)
        }
        if (b.isWindow) {
            SamsungPay.postSubmit(c)
        } else {
            overlay = SamsungPay.buildOverlay();
            document.body.appendChild(overlay);
            frame = SamsungPay.buildFrame(c);
            document.body.appendChild(frame)
        }
        SamsungPay.bindEvents()
    },
    postSubmit: function(f) {
        var a = f.replace(/&amp;/gi, "&");
        var k = a.substr(0, a.indexOf("?"));
        var j = a.substr(a.indexOf("?") + 1, a.length);
        var c = k;
        var b = j.split("&");
        var l = $("<form/>", {
            action: c,
            method: "post"
        }).appendTo("body");
        for (var e = 0; e < b.length; e++) {
            var d = b[e].split("=");
            var h = d[0],
                g = d[1];
            $("<input/>", {
                type: "hidden",
                name: h,
                value: g
            }).appendTo(l)
        }
        l.submit();
        l.remove()
    },
    buildFrame: function(c) {
        var b = document.createElement("div");
        b.id = "SamsungPay_container";
        var a = '<iframe id="SamsungPay_frame" name="SamsungPay_frame" allowTransparency="true" frameborder="0" scrolling=no src="' + c + '"></iframe>';
        b.innerHTML = a;
        return b
    },
    buildQueryString: function(b) {
        var d = new RSAKey();
        d.setPublic(b.mod, b.exp);
        b.transactionId = d.encrypt(b.transactionId);
        b.serviceId = d.encrypt(b.serviceId);
        var c = [];
        for (var a in b) {
            if (b.hasOwnProperty(a)) {
                if (SamsungPay.isArray(b[a])) {
                    c.push(a + "=" + encodeURIComponent(b[a].join(",")))
                } else {
                    if (!SamsungPay.isFunction(b[a])) {
                        c.push(a + "=" + encodeURIComponent(b[a]))
                    }
                }
            }
        }
        return "?" + c.join("&")
    },
    bindEvents: function() {
        if (window.addEventListener) {
            window.addEventListener("message", SamsungPay.onMessage, false)
        } else {
            if (window.attachEvent) {
                window.attachEvent("onmessage", SamsungPay.onMessage)
            }
        }
    },
    onMessage: function(a) {
        if (a.origin === myOrigin) {
            if (a.data.message == "cancel") {
                SamsungPay.dispose()
            } else {
                disposeWindow = true;
                var b = {};
                b = a.data.message;
                window.location.href = b.callbackUrl
            }
        }
    },
    dispose: function() {
        SamsungPay.removeModal();
        SamsungPay.unbindEvents();
        inProgress = false
    },
    removeModal: function() {
        document.body.removeChild(frame);
        document.body.removeChild(overlay)
    },
    unbindEvents: function() {
        if (window.removeEventListener) {
            window.removeEventListener("message", SamsungPay.onMessage, false)
        } else {
            if (window.detachEvent) {
                window.detachEvent("onmessage", SamsungPay.onMessage)
            }
        }
    },
    checkMobileAndRunnable: function() {
        var a = window.navigator.userAgent;
        if (a.indexOf("Android") > 0 && a.indexOf("Mobile") > 0) {
            return true
        } else {
            return false
        }
    },
    isArray: function(a) {
        return a instanceof Array
    },
    isFunction: function(a) {
        return typeof a === "function"
    },
    isString: function(a) {
        return typeof a === "string" || a instanceof String
    }
};
var dbits;
var canary = 244837814094590;
var j_lm = ((canary & 16777215) == 15715070);

function BigInteger(e, d, f) {
    if (e != null) {
        if ("number" == typeof e) {
            this.fromNumber(e, d, f)
        } else {
            if (d == null && "string" != typeof e) {
                this.fromString(e, 256)
            } else {
                this.fromString(e, d)
            }
        }
    }
}

function nbi() {
    return new BigInteger(null)
}

function am1(f, a, b, e, h, g) {
    while (--g >= 0) {
        var d = a * this[f++] + b[e] + h;
        h = Math.floor(d / 67108864);
        b[e++] = d & 67108863
    }
    return h
}

function am2(f, q, r, e, o, a) {
    var k = q & 32767,
        p = q >> 15;
    while (--a >= 0) {
        var d = this[f] & 32767;
        var g = this[f++] >> 15;
        var b = p * d + g * k;
        d = k * d + ((b & 32767) << 15) + r[e] + (o & 1073741823);
        o = (d >>> 30) + (b >>> 15) + p * g + (o >>> 30);
        r[e++] = d & 1073741823
    }
    return o
}

function am3(f, q, r, e, o, a) {
    var k = q & 16383,
        p = q >> 14;
    while (--a >= 0) {
        var d = this[f] & 16383;
        var g = this[f++] >> 14;
        var b = p * d + g * k;
        d = k * d + ((b & 16383) << 14) + r[e] + o;
        o = (d >> 28) + (b >> 14) + p * g;
        r[e++] = d & 268435455
    }
    return o
}
if (j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30
} else {
    if (j_lm && (navigator.appName != "Netscape")) {
        BigInteger.prototype.am = am1;
        dbits = 26
    } else {
        BigInteger.prototype.am = am3;
        dbits = 28
    }
}
BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = ((1 << dbits) - 1);
BigInteger.prototype.DV = (1 << dbits);
var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2, BI_FP);
BigInteger.prototype.F1 = BI_FP - dbits;
BigInteger.prototype.F2 = 2 * dbits - BI_FP;
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = new Array();
var rr, vv;
rr = "0".charCodeAt(0);
for (vv = 0; vv <= 9; ++vv) {
    BI_RC[rr++] = vv
}
rr = "a".charCodeAt(0);
for (vv = 10; vv < 36; ++vv) {
    BI_RC[rr++] = vv
}
rr = "A".charCodeAt(0);
for (vv = 10; vv < 36; ++vv) {
    BI_RC[rr++] = vv
}

function int2char(a) {
    return BI_RM.charAt(a)
}

function intAt(b, a) {
    var d = BI_RC[b.charCodeAt(a)];
    return (d == null) ? -1 : d
}

function bnpCopyTo(b) {
    for (var a = this.t - 1; a >= 0; --a) {
        b[a] = this[a]
    }
    b.t = this.t;
    b.s = this.s
}

function bnpFromInt(a) {
    this.t = 1;
    this.s = (a < 0) ? -1 : 0;
    if (a > 0) {
        this[0] = a
    } else {
        if (a < -1) {
            this[0] = a + this.DV
        } else {
            this.t = 0
        }
    }
}

function nbv(a) {
    var b = nbi();
    b.fromInt(a);
    return b
}

function bnpFromString(h, c) {
    var e;
    if (c == 16) {
        e = 4
    } else {
        if (c == 8) {
            e = 3
        } else {
            if (c == 256) {
                e = 8
            } else {
                if (c == 2) {
                    e = 1
                } else {
                    if (c == 32) {
                        e = 5
                    } else {
                        if (c == 4) {
                            e = 2
                        } else {
                            this.fromRadix(h, c);
                            return
                        }
                    }
                }
            }
        }
    }
    this.t = 0;
    this.s = 0;
    var g = h.length,
        d = false,
        f = 0;
    while (--g >= 0) {
        var a = (e == 8) ? h[g] & 255 : intAt(h, g);
        if (a < 0) {
            if (h.charAt(g) == "-") {
                d = true
            }
            continue
        }
        d = false;
        if (f == 0) {
            this[this.t++] = a
        } else {
            if (f + e > this.DB) {
                this[this.t - 1] |= (a & ((1 << (this.DB - f)) - 1)) << f;
                this[this.t++] = (a >> (this.DB - f))
            } else {
                this[this.t - 1] |= a << f
            }
        }
        f += e;
        if (f >= this.DB) {
            f -= this.DB
        }
    }
    if (e == 8 && (h[0] & 128) != 0) {
        this.s = -1;
        if (f > 0) {
            this[this.t - 1] |= ((1 << (this.DB - f)) - 1) << f
        }
    }
    this.clamp();
    if (d) {
        BigInteger.ZERO.subTo(this, this)
    }
}

function bnpClamp() {
    var a = this.s & this.DM;
    while (this.t > 0 && this[this.t - 1] == a) {
        --this.t
    }
}

function bnToString(c) {
    if (this.s < 0) {
        return "-" + this.negate().toString(c)
    }
    var e;
    if (c == 16) {
        e = 4
    } else {
        if (c == 8) {
            e = 3
        } else {
            if (c == 2) {
                e = 1
            } else {
                if (c == 32) {
                    e = 5
                } else {
                    if (c == 4) {
                        e = 2
                    } else {
                        return this.toRadix(c)
                    }
                }
            }
        }
    }
    var g = (1 << e) - 1,
        l, a = false,
        h = "",
        f = this.t;
    var j = this.DB - (f * this.DB) % e;
    if (f-- > 0) {
        if (j < this.DB && (l = this[f] >> j) > 0) {
            a = true;
            h = int2char(l)
        }
        while (f >= 0) {
            if (j < e) {
                l = (this[f] & ((1 << j) - 1)) << (e - j);
                l |= this[--f] >> (j += this.DB - e)
            } else {
                l = (this[f] >> (j -= e)) & g;
                if (j <= 0) {
                    j += this.DB;
                    --f
                }
            }
            if (l > 0) {
                a = true
            }
            if (a) {
                h += int2char(l)
            }
        }
    }
    return a ? h : "0"
}

function bnNegate() {
    var a = nbi();
    BigInteger.ZERO.subTo(this, a);
    return a
}

function bnAbs() {
    return (this.s < 0) ? this.negate() : this
}

function bnCompareTo(b) {
    var d = this.s - b.s;
    if (d != 0) {
        return d
    }
    var c = this.t;
    d = c - b.t;
    if (d != 0) {
        return (this.s < 0) ? -d : d
    }
    while (--c >= 0) {
        if ((d = this[c] - b[c]) != 0) {
            return d
        }
    }
    return 0
}

function nbits(a) {
    var c = 1,
        b;
    if ((b = a >>> 16) != 0) {
        a = b;
        c += 16
    }
    if ((b = a >> 8) != 0) {
        a = b;
        c += 8
    }
    if ((b = a >> 4) != 0) {
        a = b;
        c += 4
    }
    if ((b = a >> 2) != 0) {
        a = b;
        c += 2
    }
    if ((b = a >> 1) != 0) {
        a = b;
        c += 1
    }
    return c
}

function bnBitLength() {
    if (this.t <= 0) {
        return 0
    }
    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM))
}

function bnpDLShiftTo(c, b) {
    var a;
    for (a = this.t - 1; a >= 0; --a) {
        b[a + c] = this[a]
    }
    for (a = c - 1; a >= 0; --a) {
        b[a] = 0
    }
    b.t = this.t + c;
    b.s = this.s
}

function bnpDRShiftTo(c, b) {
    for (var a = c; a < this.t; ++a) {
        b[a - c] = this[a]
    }
    b.t = Math.max(this.t - c, 0);
    b.s = this.s
}

function bnpLShiftTo(j, e) {
    var b = j % this.DB;
    var a = this.DB - b;
    var g = (1 << a) - 1;
    var f = Math.floor(j / this.DB),
        h = (this.s << b) & this.DM,
        d;
    for (d = this.t - 1; d >= 0; --d) {
        e[d + f + 1] = (this[d] >> a) | h;
        h = (this[d] & g) << b
    }
    for (d = f - 1; d >= 0; --d) {
        e[d] = 0
    }
    e[f] = h;
    e.t = this.t + f + 1;
    e.s = this.s;
    e.clamp()
}

function bnpRShiftTo(g, d) {
    d.s = this.s;
    var e = Math.floor(g / this.DB);
    if (e >= this.t) {
        d.t = 0;
        return
    }
    var b = g % this.DB;
    var a = this.DB - b;
    var f = (1 << b) - 1;
    d[0] = this[e] >> b;
    for (var c = e + 1; c < this.t; ++c) {
        d[c - e - 1] |= (this[c] & f) << a;
        d[c - e] = this[c] >> b
    }
    if (b > 0) {
        d[this.t - e - 1] |= (this.s & f) << a
    }
    d.t = this.t - e;
    d.clamp()
}

function bnpSubTo(d, f) {
    var e = 0,
        g = 0,
        b = Math.min(d.t, this.t);
    while (e < b) {
        g += this[e] - d[e];
        f[e++] = g & this.DM;
        g >>= this.DB
    }
    if (d.t < this.t) {
        g -= d.s;
        while (e < this.t) {
            g += this[e];
            f[e++] = g & this.DM;
            g >>= this.DB
        }
        g += this.s
    } else {
        g += this.s;
        while (e < d.t) {
            g -= d[e];
            f[e++] = g & this.DM;
            g >>= this.DB
        }
        g -= d.s
    }
    f.s = (g < 0) ? -1 : 0;
    if (g < -1) {
        f[e++] = this.DV + g
    } else {
        if (g > 0) {
            f[e++] = g
        }
    }
    f.t = e;
    f.clamp()
}

function bnpMultiplyTo(c, e) {
    var b = this.abs(),
        f = c.abs();
    var d = b.t;
    e.t = d + f.t;
    while (--d >= 0) {
        e[d] = 0
    }
    for (d = 0; d < f.t; ++d) {
        e[d + b.t] = b.am(0, f[d], e, d, 0, b.t)
    }
    e.s = 0;
    e.clamp();
    if (this.s != c.s) {
        BigInteger.ZERO.subTo(e, e)
    }
}

function bnpSquareTo(d) {
    var a = this.abs();
    var b = d.t = 2 * a.t;
    while (--b >= 0) {
        d[b] = 0
    }
    for (b = 0; b < a.t - 1; ++b) {
        var e = a.am(b, a[b], d, 2 * b, 0, 1);
        if ((d[b + a.t] += a.am(b + 1, 2 * a[b], d, 2 * b + 1, e, a.t - b - 1)) >= a.DV) {
            d[b + a.t] -= a.DV;
            d[b + a.t + 1] = 1
        }
    }
    if (d.t > 0) {
        d[d.t - 1] += a.am(b, a[b], d, 2 * b, 0, 1)
    }
    d.s = 0;
    d.clamp()
}

function bnpDivRemTo(n, h, g) {
    var w = n.abs();
    if (w.t <= 0) {
        return
    }
    var k = this.abs();
    if (k.t < w.t) {
        if (h != null) {
            h.fromInt(0)
        }
        if (g != null) {
            this.copyTo(g)
        }
        return
    }
    if (g == null) {
        g = nbi()
    }
    var d = nbi(),
        a = this.s,
        l = n.s;
    var v = this.DB - nbits(w[w.t - 1]);
    if (v > 0) {
        w.lShiftTo(v, d);
        k.lShiftTo(v, g)
    } else {
        w.copyTo(d);
        k.copyTo(g)
    }
    var p = d.t;
    var b = d[p - 1];
    if (b == 0) {
        return
    }
    var o = b * (1 << this.F1) + ((p > 1) ? d[p - 2] >> this.F2 : 0);
    var B = this.FV / o,
        A = (1 << this.F1) / o,
        x = 1 << this.F2;
    var u = g.t,
        s = u - p,
        f = (h == null) ? nbi() : h;
    d.dlShiftTo(s, f);
    if (g.compareTo(f) >= 0) {
        g[g.t++] = 1;
        g.subTo(f, g)
    }
    BigInteger.ONE.dlShiftTo(p, f);
    f.subTo(d, d);
    while (d.t < p) {
        d[d.t++] = 0
    }
    while (--s >= 0) {
        var c = (g[--u] == b) ? this.DM : Math.floor(g[u] * B + (g[u - 1] + x) * A);
        if ((g[u] += d.am(0, c, g, s, 0, p)) < c) {
            d.dlShiftTo(s, f);
            g.subTo(f, g);
            while (g[u] < --c) {
                g.subTo(f, g)
            }
        }
    }
    if (h != null) {
        g.drShiftTo(p, h);
        if (a != l) {
            BigInteger.ZERO.subTo(h, h)
        }
    }
    g.t = p;
    g.clamp();
    if (v > 0) {
        g.rShiftTo(v, g)
    }
    if (a < 0) {
        BigInteger.ZERO.subTo(g, g)
    }
}

function bnMod(b) {
    var c = nbi();
    this.abs().divRemTo(b, null, c);
    if (this.s < 0 && c.compareTo(BigInteger.ZERO) > 0) {
        b.subTo(c, c)
    }
    return c
}

function Classic(a) {
    this.m = a
}

function cConvert(a) {
    if (a.s < 0 || a.compareTo(this.m) >= 0) {
        return a.mod(this.m)
    } else {
        return a
    }
}

function cRevert(a) {
    return a
}

function cReduce(a) {
    a.divRemTo(this.m, null, a)
}

function cMulTo(a, c, b) {
    a.multiplyTo(c, b);
    this.reduce(b)
}

function cSqrTo(a, b) {
    a.squareTo(b);
    this.reduce(b)
}
Classic.prototype.convert = cConvert;
Classic.prototype.revert = cRevert;
Classic.prototype.reduce = cReduce;
Classic.prototype.mulTo = cMulTo;
Classic.prototype.sqrTo = cSqrTo;

function bnpInvDigit() {
    if (this.t < 1) {
        return 0
    }
    var a = this[0];
    if ((a & 1) == 0) {
        return 0
    }
    var b = a & 3;
    b = (b * (2 - (a & 15) * b)) & 15;
    b = (b * (2 - (a & 255) * b)) & 255;
    b = (b * (2 - (((a & 65535) * b) & 65535))) & 65535;
    b = (b * (2 - a * b % this.DV)) % this.DV;
    return (b > 0) ? this.DV - b : -b
}

function Montgomery(a) {
    this.m = a;
    this.mp = a.invDigit();
    this.mpl = this.mp & 32767;
    this.mph = this.mp >> 15;
    this.um = (1 << (a.DB - 15)) - 1;
    this.mt2 = 2 * a.t
}

function montConvert(a) {
    var b = nbi();
    a.abs().dlShiftTo(this.m.t, b);
    b.divRemTo(this.m, null, b);
    if (a.s < 0 && b.compareTo(BigInteger.ZERO) > 0) {
        this.m.subTo(b, b)
    }
    return b
}

function montRevert(a) {
    var b = nbi();
    a.copyTo(b);
    this.reduce(b);
    return b
}

function montReduce(a) {
    while (a.t <= this.mt2) {
        a[a.t++] = 0
    }
    for (var c = 0; c < this.m.t; ++c) {
        var b = a[c] & 32767;
        var d = (b * this.mpl + (((b * this.mph + (a[c] >> 15) * this.mpl) & this.um) << 15)) & a.DM;
        b = c + this.m.t;
        a[b] += this.m.am(0, d, a, c, 0, this.m.t);
        while (a[b] >= a.DV) {
            a[b] -= a.DV;
            a[++b]++
        }
    }
    a.clamp();
    a.drShiftTo(this.m.t, a);
    if (a.compareTo(this.m) >= 0) {
        a.subTo(this.m, a)
    }
}

function montSqrTo(a, b) {
    a.squareTo(b);
    this.reduce(b)
}

function montMulTo(a, c, b) {
    a.multiplyTo(c, b);
    this.reduce(b)
}
Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo;

function bnpIsEven() {
    return ((this.t > 0) ? (this[0] & 1) : this.s) == 0
}

function bnpExp(h, j) {
    if (h > 4294967295 || h < 1) {
        return BigInteger.ONE
    }
    var f = nbi(),
        a = nbi(),
        d = j.convert(this),
        c = nbits(h) - 1;
    d.copyTo(f);
    while (--c >= 0) {
        j.sqrTo(f, a);
        if ((h & (1 << c)) > 0) {
            j.mulTo(a, d, f)
        } else {
            var b = f;
            f = a;
            a = b
        }
    }
    return j.revert(f)
}

function bnModPowInt(b, a) {
    var c;
    if (b < 256 || a.isEven()) {
        c = new Classic(a)
    } else {
        c = new Montgomery(a)
    }
    return this.exp(b, c)
}
BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.isEven = bnpIsEven;
BigInteger.prototype.exp = bnpExp;
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.modPowInt = bnModPowInt;
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);

function Arcfour() {
    this.i = 0;
    this.j = 0;
    this.S = new Array()
}

function ARC4init(d) {
    var c, a, b;
    for (c = 0; c < 256; ++c) {
        this.S[c] = c
    }
    a = 0;
    for (c = 0; c < 256; ++c) {
        a = (a + this.S[c] + d[c % d.length]) & 255;
        b = this.S[c];
        this.S[c] = this.S[a];
        this.S[a] = b
    }
    this.i = 0;
    this.j = 0
}

function ARC4next() {
    var a;
    this.i = (this.i + 1) & 255;
    this.j = (this.j + this.S[this.i]) & 255;
    a = this.S[this.i];
    this.S[this.i] = this.S[this.j];
    this.S[this.j] = a;
    return this.S[(a + this.S[this.i]) & 255]
}
Arcfour.prototype.init = ARC4init;
Arcfour.prototype.next = ARC4next;

function prng_newstate() {
    return new Arcfour()
}
var rng_psize = 256;
var rng_state;
var rng_pool;
var rng_pptr;

function rng_seed_int(a) {
    rng_pool[rng_pptr++] ^= a & 255;
    rng_pool[rng_pptr++] ^= (a >> 8) & 255;
    rng_pool[rng_pptr++] ^= (a >> 16) & 255;
    rng_pool[rng_pptr++] ^= (a >> 24) & 255;
    if (rng_pptr >= rng_psize) {
        rng_pptr -= rng_psize
    }
}

function rng_seed_time() {
    rng_seed_int(new Date().getTime())
}
if (rng_pool == null) {
    rng_pool = new Array();
    rng_pptr = 0;
    var t;
    if (typeof window !== "undefined" && window.crypto) {
        if (window.crypto.getRandomValues) {
            var ua = new Uint8Array(32);
            window.crypto.getRandomValues(ua);
            for (t = 0; t < 32; ++t) {
                rng_pool[rng_pptr++] = ua[t]
            }
        }
        if (navigator.appName == "Netscape" && navigator.appVersion < "5") {
            var z = window.crypto.random(32);
            for (t = 0; t < z.length; ++t) {
                rng_pool[rng_pptr++] = z.charCodeAt(t) & 255
            }
        }
    }
    while (rng_pptr < rng_psize) {
        t = Math.floor(65536 * Math.random());
        rng_pool[rng_pptr++] = t >>> 8;
        rng_pool[rng_pptr++] = t & 255
    }
    rng_pptr = 0;
    rng_seed_time()
}

function rng_get_byte() {
    if (rng_state == null) {
        rng_seed_time();
        rng_state = prng_newstate();
        rng_state.init(rng_pool);
        for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {
            rng_pool[rng_pptr] = 0
        }
        rng_pptr = 0
    }
    return rng_state.next()
}

function rng_get_bytes(b) {
    var a;
    for (a = 0; a < b.length; ++a) {
        b[a] = rng_get_byte()
    }
}

function SecureRandom() {}
SecureRandom.prototype.nextBytes = rng_get_bytes;

function parseBigInt(b, a) {
    return new BigInteger(b, a)
}

function linebrk(c, d) {
    var a = "";
    var b = 0;
    while (b + d < c.length) {
        a += c.substring(b, b + d) + "\n";
        b += d
    }
    return a + c.substring(b, c.length)
}

function byte2Hex(a) {
    if (a < 16) {
        return "0" + a.toString(16)
    } else {
        return a.toString(16)
    }
}

function pkcs1pad2(e, h) {
    if (h < e.length + 11) {
        throw new Error("Message too long for RSA")
    }
    var g = new Array();
    var d = e.length - 1;
    while (d >= 0 && h > 0) {
        var f = e.charCodeAt(d--);
        if (f < 128) {
            g[--h] = f
        } else {
            if ((f > 127) && (f < 2048)) {
                g[--h] = (f & 63) | 128;
                g[--h] = (f >> 6) | 192
            } else {
                g[--h] = (f & 63) | 128;
                g[--h] = ((f >> 6) & 63) | 128;
                g[--h] = (f >> 12) | 224
            }
        }
    }
    g[--h] = 0;
    var b = new SecureRandom();
    var a = new Array();
    while (h > 2) {
        a[0] = 0;
        while (a[0] == 0) {
            b.nextBytes(a)
        }
        g[--h] = a[0]
    }
    g[--h] = 2;
    g[--h] = 0;
    return new BigInteger(g)
}

function RSAKey() {
    this.n = null;
    this.e = 0;
    this.d = null;
    this.p = null;
    this.q = null;
    this.dmp1 = null;
    this.dmq1 = null;
    this.coeff = null
}

function RSASetPublic(b, a) {
    if (b != null && a != null && b.length > 0 && a.length > 0) {
        this.n = parseBigInt(b, 16);
        this.e = parseInt(a, 16)
    } else {
        throw new Error("Invalid RSA public key")
    }
}

function RSADoPublic(a) {
    return a.modPowInt(this.e, this.n)
}

function RSAEncrypt(d) {
    var a = pkcs1pad2(d, (this.n.bitLength() + 7) >> 3);
    if (a == null) {
        return null
    }
    var e = this.doPublic(a);
    if (e == null) {
        return null
    }
    var b = e.toString(16);
    if ((b.length & 1) == 0) {
        return b
    } else {
        return "0" + b
    }
}
RSAKey.prototype.doPublic = RSADoPublic;
RSAKey.prototype.setPublic = RSASetPublic;
RSAKey.prototype.encrypt = RSAEncrypt;]]></script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>contenType</con:name><con:value>application/json</con:value></con:property><con:property><con:name>xRequestId</con:name><con:value>1234567890</con:value></con:property><con:property><con:name>serviceId</con:name><con:value>db1294c3c8bc42fe9ce762</con:value></con:property><con:property><con:name>sp_callback</con:name><con:value>https://merchant.host.endpoint/order/KjeNvldA64v91gaHa/result</con:value></con:property><con:property><con:name>sp_order_number</con:name><con:value>DSTRF345789dsgTY</con:value></con:property><con:property><con:name>sp_recurring</con:name><con:value>false</con:value></con:property><con:property><con:name>sp_CONST_protocol_type</con:name><con:value>3DS</con:value></con:property><con:property><con:name>sp_CONST_protocol_version</con:name><con:value>80</con:value></con:property><con:property><con:name>sp_amount_option</con:name><con:value>FORMAT_TOTAL_ESTIMATED_AMOUNT</con:value></con:property><con:property><con:name>sp_amount_currency</con:name><con:value>USD</con:value></con:property><con:property><con:name>sp_amount_total</con:name><con:value>300</con:value></con:property><con:property><con:name>sp_merchant_name</con:name><con:value>virtual shop</con:value></con:property><con:property><con:name>sp_merchant_url</con:name><con:value>virtualshop.com</con:value></con:property><con:property><con:name>sp_merchant_reference</con:name><con:value>xn7qfnd</con:value></con:property><con:property><con:name>sp_allowed_brand_1</con:name><con:value>VI</con:value></con:property><con:property><con:name>sp_allowed_brand_2</con:name><con:value>MC</con:value></con:property><con:property><con:name>sp_id</con:name><con:value>6980f1745a764e588e1139</con:value></con:property><con:property><con:name>sp_payment_reference</con:name><con:value>667ae458c01b4d95bdc76af81e3cd11e</con:value></con:property><con:property><con:name>sp_payment_status</con:name><con:value>CHARGED</con:value></con:property><con:property><con:name>sp_CONST_payment_provider</con:name><con:value>PAYLINE</con:value></con:property><con:property><con:name>sp_timestamp</con:name><con:value>1808241118</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>